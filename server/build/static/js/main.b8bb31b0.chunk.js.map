{"version":3,"sources":["components/TableData.js","queries.js","mutations.js","components/Marketplace.js","components/Equipment.js","components/TableHistory.js","components/BorrowingHistory.js","components/LendingHistory.js","components/Profile.js","App.js","index.js"],"names":["TableHistory","label","equipment","eventHandler","buttonLabel","map","e","key","id","category","weight","name","number","src","avatar_url","alt","className","onClick","ALL_OTHER_EQUIPMENT","gql","MY_EQUIPMENT","MY_BORROWING_HISTORY","MY_LENDING_HISTORY","MY_ACCOUNT","PLACE_HOLD","ADD_EQUIPMENT","REMOVE_HOLD","Marketplace","useState","available","setAvailable","onHold","setOnHold","checkedOut","setCheckedOut","green","useQuery","variables","type","yellow","red","useMutation","refetchQueries","query","addHold","placeHold","a","console","log","useEffect","data","allOtherEquipment","loading","error","Equipment","setCategory","setWeight","addEquipment","newEquipment","event","preventDefault","parseInt","myEquipment","onSubmit","value","onChange","target","TableData","transactions","columnLabel","check_out_timestamp","check_in_timestamp","BorrowingHistory","setTransactions","ledger","myBorrowingHistory","weightSet","Set","t","add","uniqueWeights","filterWeight","shortLedger","filter","categorySet","uniqueCategories","lenderSet","uniqueLenders","lender","filterLender","LendingHistory","myLendingHistory","Profile","setInfo","account","myAccount","App","to","activeStyle","fontWeight","color","exact","path","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8bb31b0.chunk.js","sourcesContent":["import React from 'react'\n\nconst TableHistory = ({ label, equipment, eventHandler, buttonLabel }) => {\n  // if(equipment[0]) {\n  //   console.log(`Equipment Array = ${JSON.stringify(equipment)}`)\n  //   console.log(`1st ID = ${equipment[1].id}`)\n  // }\n  \n  return (\n    <div>\n      <h2>{label}</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>\n              Category\n            </th>\n            <th>\n              Weight\n            </th>\n            <th>\n              Owner\n            </th>\n            <th>\n              Number\n            </th>\n            <th>\n              Avatar {/* Might leave empty as it is self explanatory */}\n            </th>\n            <th>\n              {buttonLabel}\n            </th>\n          </tr>\n          {equipment.map(e =>\n            <tr key={e.id}>\n              <td>{e.category}</td>\n              <td>{e.weight}</td>\n              <td>{e.name}</td>\n              <td>{e.number}</td>\n              <td><img src={e.avatar_url} alt=\"Gym Leader\" className=\"avatar\"/></td>\n              <td><button onClick={() => eventHandler(e.id)}>{buttonLabel}</button></td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default TableHistory","import { gql } from '@apollo/client'\n\nexport const ALL_OTHER_EQUIPMENT = gql`\n  query filterOtherEquipmentByType($type: String!){\n    allOtherEquipment(\n      type: $type\n    ) {\n      id,\n      category,\n      weight,\n      name,\n      number,\n      avatar_url\n    }\n  }\n`\n\nexport const MY_EQUIPMENT = gql`\n  query filterMyEquipmentByType($type: String!){\n    myEquipment(\n      type: $type\n    ) {\n      id,\n      category,\n      weight,\n      name,\n      number,\n      avatar_url\n    }\n  }\n`\n\nexport const MY_BORROWING_HISTORY = gql`\n  query{\n    myBorrowingHistory{\n      id,\n      category,\n      weight,\n      check_out_timestamp,\n      check_in_timestamp,\n      name,\n      number,\n      avatar_url\n    }\n  }\n`\n\nexport const MY_LENDING_HISTORY = gql`\n  query{\n    myLendingHistory{\n      id,\n      category,\n      weight,\n      check_out_timestamp,\n      check_in_timestamp,\n      name,\n      number,\n      avatar_url\n    }\n  }\n`\n\nexport const MY_ACCOUNT = gql`\n  query{\n    myAccount{\n      name,\n      number,\n      email,\n      house,\n      street,\n      city,\n      avatar_url\n    }\n  }\n`","import { gql } from '@apollo/client'\n\nexport const PLACE_HOLD = gql`\n  mutation placeHold($id: String!){\n    placeHold(\n      id: $id\n    ) {\n      category\n      weight\n      id\n      transaction_id\n      hold_user_id\n    }\n  }\n`\n\nexport const ADD_EQUIPMENT = gql`\n  mutation addNewEquipment($category: String!, $weight: Int!){\n    addEquipment(\n      category: $category,\n      weight: $weight\n    ) {\n      category,\n      weight,\n      id,\n      user_id,\n      transaction_id,\n      hold_user_id\n    }\n  }\n`\n\nexport const REMOVE_HOLD = gql`\n  mutation removeHold($id: String!){\n    removeHold(\n      id: $id\n    ) {\n      category,\n      weight,\n      id,\n      user_id\n      transaction_id,\n      hold_user_id\n    }\n  }\n`","import React, { useState, useEffect } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport TableHistory from './TableData'\nimport { ALL_OTHER_EQUIPMENT } from '../queries'\nimport { PLACE_HOLD } from '../mutations'\n\nconst Marketplace = () => {\n\n  // Application State\n  const [available, setAvailable] = useState([])\n  const [onHold, setOnHold] = useState([])\n  const [checkedOut, setCheckedOut] = useState([])\n\n  // Defining the useQuery Hooks\n  const green = useQuery(ALL_OTHER_EQUIPMENT, { variables: { type: \"available\" } })\n  const yellow = useQuery(ALL_OTHER_EQUIPMENT, { variables: { type: \"hold\" } })\n  const red = useQuery(ALL_OTHER_EQUIPMENT, { variables: { type: \"checked out\" } })\n\n  // Defining useMutation Hook for placing holds\n  const [addHold] = useMutation(PLACE_HOLD, {\n    refetchQueries: [\n      {\n        query: ALL_OTHER_EQUIPMENT,\n        variables: { type: \"available\" }\n      },\n      {\n        query: ALL_OTHER_EQUIPMENT,\n        variables: { type: \"hold\" }\n      },\n    ]\n  })\n\n  // Event handler we will render to call the mutation, addHold\n  const placeHold = async (equipment) => {\n    await addHold({\n      variables: { id: equipment }\n    })\n\n    console.log(`Placing a hold on equipment id: ${equipment}`)\n  }\n\n\n  // Available Equipment Hook\n  useEffect(() => {\n    if (green.data) {\n      setAvailable(green.data.allOtherEquipment)\n    }\n  }, [green.data]) // eslint-disable-line\n\n  // Equipment on hold Hook\n  useEffect(() => {\n    if(yellow.data){\n      setOnHold(yellow.data.allOtherEquipment)\n    }\n  }, [yellow.data]) // eslint-disable-line\n\n  // Equipment checked out Hook\n  useEffect(() => {\n    if(red.data){\n      setCheckedOut(red.data.allOtherEquipment)\n    }\n  }, [red.data]) // eslint-disable-line\n\n  if (green.loading || yellow.loading || red.loading)  {\n    return <div>loading...</div>\n  } else if (green.error || yellow.error || red.error) {\n      return <div>Error retrieving Marketplace data</div>\n  }\n\n  return(\n    <div>\n      <h1>\n        Marketplace\n      </h1>\n\n      <TableHistory label=\"Available Equipment\" equipment={available} eventHandler={placeHold} buttonLabel=\"Place Hold\" />\n      <TableHistory label=\"Equipment Placed on Hold\" equipment={onHold} />\n      <TableHistory label=\"Equipment Checked Out\" equipment={checkedOut} />\n    </div>\n  )\n}\n\nexport default Marketplace","import React, { useState, useEffect } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport TableHistory from './TableData'\nimport { MY_EQUIPMENT } from '../queries'\nimport { ADD_EQUIPMENT, REMOVE_HOLD } from '../mutations'\n\nconst Equipment = () => {\n\n  // Application State\n  // Table State\n  const [available, setAvailable] = useState([])\n  const [onHold, setOnHold] = useState([])\n  const [checkedOut, setCheckedOut] = useState([])\n  // Form State\n  const [category, setCategory] = useState('')\n  const [weight, setWeight] = useState('')\n\n  // Defining the useQuery Hooks\n  const green = useQuery(MY_EQUIPMENT, { variables: { type: \"available\" } })\n  const yellow = useQuery(MY_EQUIPMENT, { variables: { type: \"hold\" } })\n  const red = useQuery(MY_EQUIPMENT, { variables: { type: \"checked out\" } })\n\n  // Defining useMutation Hook for adding new equipment\n  const [addEquipment] = useMutation(ADD_EQUIPMENT, {\n    refetchQueries: [\n      {\n        query: MY_EQUIPMENT,\n        variables: { type: \"available\" }\n      }\n    ]\n  })\n\n  // Event handler we will render to call the mutation, addEquipment\n  const newEquipment = async (event) => {\n    event.preventDefault()\n\n    await addEquipment({\n      variables: {\n        category: category,\n        weight: parseInt(weight)\n      }\n    })\n\n    console.log(`Creating a new piece of equipment category: ${category} weight: ${weight}`)\n\n    setCategory('')\n    setWeight('')\n  }\n\n  // Defining useMutation Hook for removing a hold\n  const [cancelHold] = useMutation(REMOVE_HOLD, {\n    refetchQueries: [\n      {\n        query: MY_EQUIPMENT,\n        variables: { type: \"available\" }\n      },\n      {\n        query: MY_EQUIPMENT,\n        variables: { type: \"hold\" }\n      }\n    ]\n  })\n\n  // Event handler we will render to call the mutation, cancelHold\n  const holdRemove = async (event) => {\n    event.preventDefault()\n\n    await cancelHold()\n\n    console.log(`Removing a hold placed on equipment`)\n  }\n\n  // Available Equipment Hook\n  useEffect(() => {\n    if (green.data) {\n      setAvailable(green.data.myEquipment)\n    }\n  }, [green.data]) // eslint-disable-line\n\n  // Equipment on hold Hook\n  useEffect(() => {\n    if (yellow.data) {\n      setOnHold(yellow.data.myEquipment)\n    }\n  }, [yellow.data]) // eslint-disable-line\n\n  // Equipment checked out Hook\n  useEffect(() => {\n    if (red.data) {\n      setCheckedOut(red.data.myEquipment)\n    }\n  }, [red.data]) // eslint-disable-line\n\n  if (green.loading || yellow.loading || red.loading) {\n    return <div>loading...</div>\n  } else if (green.error || yellow.error || red.error) {\n    return <div>Error retrieving Marketplace data</div>\n  }\n\n  return(\n    <div>\n      <h1>My Equipment</h1>\n\n      <TableHistory label=\"Available\" equipment={available}/>\n      <TableHistory label=\"On Hold\" equipment={onHold} />\n      <TableHistory label=\"Checked Out\" equipment={checkedOut} />\n      <br/>\n      <br/>\n      <br/>\n      {/* Will add form validation after and add CSS styles, specifically the margin to get rid of the br elements*/}\n      <form onSubmit={newEquipment}>\n        <div>\n          Category\n          <input\n            value={category}\n            onChange={({ target }) => setCategory(target.value)}\n          />\n        </div>\n        <div>\n          Weight\n          <input\n            value={weight}\n            onChange={({ target }) => setWeight(target.value)}\n          />\n        </div>\n        <button type='submit'>Add Equipment</button>\n      </form>\n    </div>\n    \n\n    \n  )\n}\n\nexport default Equipment","import React from 'react'\n\nconst TableData = ({ transactions, columnLabel }) => {\n  \n  return (\n    <div>\n      <table>\n        <tbody>\n          <tr>\n            <th>\n              Category\n            </th>\n            <th>\n              Weight\n            </th>\n            <th>\n              Checkout\n            </th>\n            <th>\n              Checkin\n            </th>\n            <th>\n              {columnLabel}\n              </th>\n            <th>\n              Number\n            </th>\n          </tr>\n          {transactions.map(e =>\n            <tr key={e.id}>\n              <td>{e.category}</td>\n              <td>{e.weight}</td>\n              <td>{e.check_out_timestamp}</td>\n              <td>{e.check_in_timestamp}</td>\n              <td>{e.name}</td>\n              <td>{e.number}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default TableData","import React, { useState, useEffect }from 'react'\nimport { useQuery } from '@apollo/client'\nimport { MY_BORROWING_HISTORY } from '../queries'\nimport TableHistory from './TableHistory'\nimport Input from './Input'\n\nconst BorrowingHistory = () => {\n\n  // Application State\n  const [transactions, setTransactions] = useState([])\n  const [weightQuery, setWeightQuery] = useState('')\n  const [categoryQuery, setCategoryQuery] = useState('')\n  const [lenderQuery, setLenderQuery] = useState('')\n  // const [selectedEquipment, setSelectedEquipment] = useState(null)\n\n  // Defining the useQuery Hooks\n  const ledger = useQuery(MY_BORROWING_HISTORY)\n\n  // Transactions useEffect Hook\n  useEffect(() => {\n    if (ledger.data) {\n      setTransactions(ledger.data.myBorrowingHistory)\n    }\n  }, [ledger.data]) // eslint-disable-line\n\n  // // Render filtered results of transactions array\n  // const queryFilter = async () => {\n  //   // Filter transactions by weight\n  //   async function weightFilter(arrayToFilter) {\n  //     const weightFilteredTransactions = arrayToFilter.filter(t => t.weight.toUpperCase() === weightQuery.toUpperCase())\n\n  //     return weightFilteredTransactions\n  //   }\n\n  //   // Filter transactions by category\n  //   async function categoryFilter(arrayToFilter) {\n  //     const categoryFilteredTransactions = arrayToFilter.filter(t => t.category.toUpperCase() === categoryQuery.toUpperCase())\n\n  //     return categoryFilteredTransactions\n  //   }\n\n  //   // Filter transactions by lender\n  //   async function lenderFilter(arrayToFilter) {\n  //     const lenderFilteredTransactions = arrayToFilter.filter(t => t.name.toUpperCase() === lenderQuery.toUpperCase())\n\n  //     return lenderFilteredTransactions\n  //   }\n\n  //   if(weightQuery || categoryQuery || lenderQuery){\n  //     return weightFilter(await categoryFilter(await lenderFilter(transactions)))\n  //   } else\n  //     return transactions\n  // }\n\n  // Controlled Component Functions\n  const handleWeightQuery = (event) => {\n    console.log(event.target.value)\n    setWeightQuery(event.target.value)\n  }\n\n  const handleCategoryQuery = (event) => {\n    console.log(event.target.value)\n    setCategoryQuery(event.target.value)\n  }\n\n  const handleLenderQuery = (event) => {\n    console.log(event.target.value)\n    setLenderQuery(event.target.value)\n  }\n\n  if (ledger.loading) {\n    return <div>loading...</div>\n  } else if (ledger.error) {\n    return <div>Error retrieving Borrowing History data</div>\n  }\n\n  // Creating a set of all the unique weight values\n  const weightSet = new Set()\n  ledger.data.myBorrowingHistory.map(t => weightSet.add(t.weight))\n  const uniqueWeights = [...weightSet]\n\n  // Event handler for all weights\n  const filterWeight = (weight) => {\n    const shortLedger = ledger.data.myBorrowingHistory.filter(t => t.weight === weight)\n\n    setTransactions(shortLedger)\n  }\n\n  // Creating a set of all the unique equipment category values\n  const categorySet = new Set()\n  ledger.data.myBorrowingHistory.map(t => categorySet.add(t.category))\n  const uniqueCategories = [...categorySet]\n\n  // Event handler for all categories\n  const filterCategory = (category) => {\n    const shortLedger = ledger.data.myBorrowingHistory.filter(t => t.category === category)\n\n    setTransactions(shortLedger)\n  }\n\n  // Creating a set of all the unique lenders\n  const lenderSet = new Set()\n  ledger.data.myBorrowingHistory.map(t => lenderSet.add(t.name))\n  const uniqueLenders = [...lenderSet]\n\n  // Event handler for all categories\n  const filterLender = (lender) => {\n    const shortLedger = ledger.data.myBorrowingHistory.filter(t => t.name === lender)\n\n    setTransactions(shortLedger)\n  }\n\n  // Respective reset event handler\n  const reset = () => {\n    setTransactions(ledger.data.myBorrowingHistory)\n  }\n\n  return (\n    <div>\n      <h1>\n        My Borrowing History\n      </h1>\n      <h2>\n        Breakdown of Your Borrowing\n      </h2>\n\n      {/* <Input\n        label=\"Filter by Weight\"\n        newInfo={weightQuery}\n        handleInfoChange={handleWeightQuery}\n      />\n      <Input\n        label=\"Filter by Category\"\n        newInfo={categoryQuery}\n        handleInfoChange={handleCategoryQuery}\n      />\n      <Input\n        label=\"Filter by Lender Name\"\n        newInfo={lenderQuery}\n        handleInfoChange={handleLenderQuery}\n      />\n      <button\n        onClick={() => console.log('button clicked')}\n      />\n      <br/> */}\n      <span><b>Weights: </b></span>\n      {uniqueWeights.map(weight =>\n        <button key={weight} type='button' onClick={() => filterWeight(weight)}>{weight} lb</button>\n      )}\n      <br/>\n      <span><b>Categories: </b></span>\n      {uniqueCategories.map(category =>\n        <button key={category} type='button' onClick={() => filterWeight(category)}>{category}</button>\n      )}\n      <br/>\n      <span><b>Lenders: </b></span>\n      {uniqueLenders.map(lender =>\n        <button key={lender} type='button' onClick={() => filterLender(lender)}>{lender}</button>\n      )}\n      <br/>\n      <br/>\n      <button type='button' onClick={() => reset()}>Reset Filters</button>\n\n      <br/>\n      <br/>\n      <br/>\n\n      <h2>\n        Ledger of Transactions\n      </h2>\n      <TableHistory transactions={transactions} columnLabel=\"Lender\" />\n    </div>\n  )\n}\n\nexport default BorrowingHistory","import React, { useState, useEffect }from 'react'\nimport { useQuery } from '@apollo/client'\nimport { MY_LENDING_HISTORY } from '../queries'\nimport TableHistory from './TableHistory'\n\nconst LendingHistory = () => {\n\n  // Application State\n  const [transactions, setTransactions] = useState([])\n\n  // Defining the useQuery Hooks\n  const ledger = useQuery(MY_LENDING_HISTORY)\n\n  // Transactions useEffect Hook\n  useEffect(() => {\n    if (ledger.data) {\n      setTransactions(ledger.data.myLendingHistory)\n    }\n  }, [ledger.data]) // eslint-disable-line\n\n  if (ledger.loading) {\n    return <div>loading...</div>\n  } else if (ledger.error) {\n    return <div>Error retrieving Lending History data</div>\n  }\n\n  return (\n    <div>\n      <h1>\n        My Lending History\n      </h1>\n\n      <TableHistory transactions={transactions} columnLabel=\"Borrower\" />\n    </div>\n  )\n}\n\nexport default LendingHistory","import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { MY_ACCOUNT } from '../queries'\n\nconst Profile = () => {\n\n  // Application State\n  const [info, setInfo] = useState([])\n\n  // Defining the useQuery Hooks\n  const account = useQuery(MY_ACCOUNT)\n\n  // Available Equipment Hook\n  useEffect(() => {\n    if (account.data) {\n      setInfo(account.data.myAccount)\n    }\n  }, [account.data]) // eslint-disable-line\n\n\n  if (account.loading) {\n    return <div>loading...</div>\n  } else if (account.error) {\n    return <div>Error retrieving Dashboard data</div>\n  }\n\n  return(\n    <div>\n      <h1>Dashboard</h1>\n\n      {/* <p><b>Name:</b> {info[0].name}</p>\n      <p><b>Number:</b> {info[0].number}</p>\n      <p><b>Email:</b> {info[0].email}</p>\n      <p><b>House:</b> {info[0].house}</p>\n      <p><b>Street:</b> {info[0].street}</p>\n      <p><b>City:</b> {info[0].city}</p> */}\n      <p><b>Name:</b> Brock Harrison</p>\n      <p><b>Number:</b> 647-787-4515</p>\n      <p><b>Email:</b> Brock@Kanto.com</p>\n      <p><b>House:</b> 14</p>\n      <p><b>Street:</b> Route 5</p>\n      <p><b>City:</b> Pewter City</p>\n\n    </div>\n    \n\n    \n  )\n}\n\nexport default Profile","import React, { useState } from 'react'\n// Importing React-Router\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Redirect,\n  useParams,\n  useHistory,\n} from \"react-router-dom\"\n\nimport Marketplace from './components/Marketplace'\nimport Equipment from './components/Equipment'\nimport BorrowingHistory from './components/BorrowingHistory'\nimport LendingHistory from './components/LendingHistory'\nimport Profile from './components/Profile'\nimport './App.css'\n\nfunction App() {\n\n  return (\n    <div>\n    {/* <div className=\"container\"> */}\n\n      <Router>\n        <div className=\"sidebar\">\n          <NavLink to=\"/\"><h1 className=\"logo\">GYM SHARE</h1></NavLink>\n          <NavLink to=\"/marketplace\" className=\"link nav-select\" activeStyle={{\n            fontWeight: \"bold\",\n            color: \"white\"\n          }}>Marketplace</NavLink>\n          <NavLink to=\"/equipment\" className=\"link nav-select\" activeStyle={{\n            fontWeight: \"bold\",\n            color: \"white\"\n          }}>My Equipment</NavLink>\n          <NavLink to=\"/borrowingHistory\" className=\"link nav-select\" activeStyle={{\n            fontWeight: \"bold\",\n            color: \"white\"\n          }}>Borrowing History</NavLink>\n          <NavLink to=\"/lendingHistory\" className=\"link nav-select\" activeStyle={{\n            fontWeight: \"bold\",\n            color: \"white\"\n          }}>Lending History</NavLink>\n          {/* <Link to=\"/profile\" className=\"link nav-select\">Profile</Link> */}\n          <button className=\"logout-button\">Logout</button>\n        </div>\n\n        {/* <div className=\"topbar\">\n          <header>\n            Gym Share\n          </header>\n        </div> */}\n        <div className=\"main\">\n          <Switch>\n            <Route exact={true} path=\"/\">\n              <Profile />\n            </Route>\n            <Route exact={true} path=\"/marketplace\">\n              <Marketplace />\n            </Route>\n            <Route exact={true} path=\"/equipment\">\n              <Equipment />\n            </Route>\n            <Route exact={true} path=\"/borrowingHistory\">\n              <BorrowingHistory />\n            </Route>\n            <Route exact={true} path=\"/lendingHistory\">\n              <LendingHistory />\n            </Route>\n          </Switch>\n        </div>\n        \n      </Router>\n        {/* <button onClick={() => setPage('marketPlace')}>Marketplace</button>\n        <button onClick={() => setPage('equipment')}>My Equipment</button>\n        <button onClick={() => setPage('borrowingHistory')}>Borrowing History</button>\n        <button onClick={() => setPage('lendingHistory')}>Lending History</button>\n        <button onClick={() => setPage('profile')}>Profile</button>\n        <button onClick={() => setPage()}>Log Out</button> */}\n      \n      \n      {/* <div className=\"topbar\">\n        <header>\n          Gym Share\n        </header>\n      </div>\n\n      <div className=\"main\">\n        <Marketplace\n          show={page === 'marketPlace'}\n        />\n\n        <Equipment\n          show={page === 'equipment'}\n        />\n\n        <BorrowingHistory\n          show={page === 'borrowingHistory'}\n        />\n\n        <LendingHistory\n          show={page === 'lendingHistory'}\n        />\n\n        <Profile\n          show={page === 'profile'}\n        />\n      </div> */}\n      \n\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles.css'\nimport App from './App'\n\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider } from '@apollo/client'\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'http://localhost:3006/graphql'\n  })\n})\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}